{"ast":null,"code":"import Modal from '../../components/common/TodoModal.vue'; // import Axios from 'axios'\n\nexport default {\n  name: 'SignIn',\n  components: {\n    'Modal': Modal\n  },\n\n  data() {\n    return {\n      userId: '',\n      userPw: ''\n    };\n  },\n\n  methods: {\n    modalEvent(key) {\n      this.$emit('modalEvent', key);\n    },\n\n    doSignIn() {\n      let self = this;\n      /*\n        ******* 방어코드 시작 *******\n       */\n\n      if (!this.checkInvalidate()) return; // let self = this;\n      // axios post 요청\n\n      let obj = {};\n      obj.userId = this.userId;\n      obj.userPw = this.userPw;\n      this.$store.dispatch('SIGNIN', obj, this.axiosConfig).then(res => {\n        console.log(self);\n        console.log('sign in res', res);\n      }).catch(err => console.log('sigin err', err.message));\n      /*\n      Axios.post('http://localhost:8080/auth/signin', JSON.stringify( obj ), this.axiosConfig)\n        .then( function( res ) {\n           console.log( ' res ', res )\n           if ( res.data === '' ) {\n            alert('존재하지 않거나 입력하신 ID or 비밀번호가 일치하지 않습니다!');\n            return;\n          }\n           // 사용자 정보를 vuex에 저장시킨다.\n          let storeObj = {};\n          storeObj.id        = res.data.id;\n          storeObj.userId    = self.userId;\n          storeObj.userName  = res.data.username;\n          storeObj.userEmail = res.data.useremail;\n          storeObj.userBirth = res.data.userbirth;\n          storeObj.role      = res.data.role;\n           self.$store.commit('SET_USERINFO', storeObj);\n         })\n        .catch(function(error) {\n          console.log('res', error);\n        });\n        */\n    },\n\n    /* 검증 */\n    checkInvalidate() {\n      if (this.userId === '' || this.userPw === '') {\n        alert('빠짐없이 정보를 입력해주세요!');\n        return false;\n      } // userId 체크\n\n\n      if (this.userId.length < 5) {\n        alert('ID는 5자리 이상이어야 합니다!');\n        return false;\n      } // password 체크\n\n\n      if (this.userPw.length < 6) {\n        alert('입력한 글자가 6글자 이상이어야 합니다!');\n        return false;\n      } // 모든 검증을 통과시\n\n\n      return true;\n    },\n\n    /* 키이벤트 */\n    keyEvent(e) {\n      const regExp = /[^0-9a-z]/g;\n      const regExp2 = /[^a-z]/g;\n      const ele = e.target; // userId 첫 글자 숫자 막기\n\n      if (this.userId.trim().length === 1) {\n        if (regExp2.test(ele.value)) {\n          ele.value = ele.value.replace(regExp2, '');\n          alert('ID는 첫 시작은 영문자만 사용가능합니다. ');\n        }\n      } // userId 한글입력 막기\n\n\n      if (regExp.test(ele.value)) {\n        ele.value = ele.value.replace(regExp, '');\n        alert('ID는 영문(소문자), 숫자만 사용가능합니다. ');\n      } // 중복체크 해제\n\n\n      if (this.isUserIdCheck) this.isUserIdCheck = !this.isUserIdCheck;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA4CA,OAAOA,KAAP,MAAkB,uCAAlB,C,CACA;;AAEA,eAAe;EAEbC,IAAI,EAAE,QAFO;EAGbC,UAAU,EAAE;IACV,SAAUF;EADA,CAHC;;EAMbG,IAAI,GAAG;IACL,OAAO;MACLC,MAAK,EAAI,EADJ;MAELC,MAAK,EAAI;IAFJ,CAAP;EAID,CAXY;;EAYbC,OAAO,EAAE;IACPC,UAAU,CAAEC,GAAF,EAAQ;MAChB,KAAKC,KAAL,CAAW,YAAX,EAAyBD,GAAzB;IACD,CAHM;;IAIPE,QAAQ,GAAG;MAET,IAAIC,IAAG,GAAI,IAAX;MACA;;;;MAGA,IAAK,CAAC,KAAKC,eAAL,EAAN,EAA+B,OANtB,CAQT;MACA;;MACA,IAAIC,GAAE,GAAI,EAAV;MACAA,GAAG,CAACT,MAAJ,GAAa,KAAKA,MAAlB;MACAS,GAAG,CAACR,MAAJ,GAAa,KAAKA,MAAlB;MAEA,KAAKS,MAAL,CAAYC,QAAZ,CAAsB,QAAtB,EAAgCF,GAAhC,EAAqC,KAAKG,WAA1C,EAAwDC,IAAxD,CAAgEC,GAAF,IAAW;QACvEC,OAAO,CAACC,GAAR,CAAYT,IAAZ;QACAQ,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,GAA3B;MACD,CAHD,EAGGG,KAHH,CAGWC,GAAF,IAAaH,OAAO,CAACC,GAAR,CAAa,WAAb,EAA0BE,GAAG,CAACC,OAA9B,CAHtB;MAKA;;;;;;;;;;;;;;;;;;;;;;IA4BD,CAnDM;;IAoDP;IACAX,eAAe,GAAG;MAEhB,IACE,KAAKR,MAAL,KAAgB,EAAhB,IACA,KAAKC,MAAL,KAAgB,EAFlB,EAGE;QACAmB,KAAK,CAAC,kBAAD,CAAL;QACA,OAAO,KAAP;MACF,CARgB,CAUhB;;;MACA,IAAK,KAAKpB,MAAL,CAAYqB,MAAZ,GAAqB,CAA1B,EAA8B;QAC5BD,KAAK,CAAC,oBAAD,CAAL;QACA,OAAO,KAAP;MACF,CAdgB,CAgBhB;;;MACA,IAAK,KAAKnB,MAAL,CAAYoB,MAAZ,GAAqB,CAA1B,EAA8B;QAC5BD,KAAK,CAAC,wBAAD,CAAL;QACA,OAAO,KAAP;MACF,CApBgB,CAsBhB;;;MACA,OAAO,IAAP;IACD,CA7EM;;IA8EP;IACAE,QAAQ,CAAEC,CAAF,EAAM;MAEZ,MAAMC,MAAK,GAAK,YAAhB;MACA,MAAMC,OAAM,GAAI,SAAhB;MACA,MAAMC,GAAE,GAAQH,CAAC,CAACI,MAAlB,CAJY,CAMZ;;MACA,IAAK,KAAK3B,MAAL,CAAY4B,IAAZ,GAAmBP,MAAnB,KAA8B,CAAnC,EAAuC;QAErC,IAAII,OAAO,CAACI,IAAR,CAAaH,GAAG,CAACI,KAAjB,CAAJ,EAA6B;UAC3BJ,GAAG,CAACI,KAAJ,GAAYJ,GAAG,CAACI,KAAJ,CAAUC,OAAV,CAAkBN,OAAlB,EAA2B,EAA3B,CAAZ;UACAL,KAAK,CAAC,0BAAD,CAAL;QACF;MACF,CAbY,CAeZ;;;MACA,IAAII,MAAM,CAACK,IAAP,CAAYH,GAAG,CAACI,KAAhB,CAAJ,EAA4B;QAC1BJ,GAAG,CAACI,KAAJ,GAAYJ,GAAG,CAACI,KAAJ,CAAUC,OAAV,CAAkBP,MAAlB,EAA0B,EAA1B,CAAZ;QACAJ,KAAK,CAAC,4BAAD,CAAL;MACF,CAnBY,CAqBZ;;;MACA,IAAK,KAAKY,aAAV,EAA0B,KAAKA,aAAL,GAAqB,CAAC,KAAKA,aAA3B;IAE5B;;EAvGO;AAZI,CAAf","names":["Modal","name","components","data","userId","userPw","methods","modalEvent","key","$emit","doSignIn","self","checkInvalidate","obj","$store","dispatch","axiosConfig","then","res","console","log","catch","err","message","alert","length","keyEvent","e","regExp","regExp2","ele","target","trim","test","value","replace","isUserIdCheck"],"sourceRoot":"","sources":["/Users/kdw/Documents/todo/todo-front/src/components/login/SignIn.vue"],"sourcesContent":["<template>\n  <Modal>\n    <template #header>\n      <div class=\"modalClose\" >\n        <i\n        class=\"closeModalBtn fas fa-times\"\n        aria-hidden=\"true\"\n        style=\"font-size:3rem;\"\n        @click=\"modalEvent('modalClose')\"\n        ></i>\n      </div>\n      <h3>로그인</h3>\n    </template>\n    <template #body>\n\n      <div class=\"input-group\">\n        <span class=\"input-group-addon\">ID</span>\n        <input type=\"text\" v-model=\"userId\" @input=\"keyEvent\" class=\"form-control\" placeholder=\"ID를 입력하세요.\">\n      </div><!-- /input-group -->\n\n      <div class=\"input-group commonMarginTop\">\n        <span class=\"input-group-addon\">PW</span>\n        <input type=\"password\" v-model=\"userPw\" class=\"form-control\" placeholder=\"비밀번호를 입력하세요.\">\n      </div><!-- /input-group -->\n\n      <!-- 해당 정보 입력관련 처리는 App.vue에서 처리하게 한다. -->\n      <div class=\"input-group commonMarginTop\">\n        [&nbsp;<a href=\"#\">ID가 기억나지 않으세요?</a>&nbsp;]\n      </div><!-- /input-group -->\n      <div class=\"input-group commonMarginTop\">\n        [&nbsp;<a href=\"#\">비밀번호가 기억나지 않으세요?</a>&nbsp;]\n      </div><!-- /input-group -->\n\n    </template>\n    <template #footer>\n      <div class=\"\">\n        <button type=\"button\" @click=\"doSignIn\" class=\"btn btn-default\" style=\"margin:0;\">로그인</button>\n        <button type=\"button\" @click=\"modalEvent('signUp')\" class=\"btn btn-default commonMarginLeft\" style=\"margin:0; margin-left: 5px;\">회원가입</button>\n      </div>\n    </template>\n  </Modal>\n</template>\n\n<script>\nimport Modal from '../../components/common/TodoModal.vue'\n// import Axios from 'axios'\n\nexport default {\n\n  name: 'SignIn',\n  components: {\n    'Modal' : Modal\n  },\n  data() {\n    return {\n      userId : '',\n      userPw : ''\n    }\n  },\n  methods: {\n    modalEvent( key ) {\n      this.$emit('modalEvent', key);\n    },\n    doSignIn() {\n\n      let self = this;\n      /*\n        ******* 방어코드 시작 *******\n       */\n      if ( !this.checkInvalidate() ) return;\n\n      // let self = this;\n      // axios post 요청\n      let obj = {};\n      obj.userId = this.userId;\n      obj.userPw = this.userPw;\n\n      this.$store.dispatch( 'SIGNIN', obj, this.axiosConfig ).then( ( res ) => {\n        console.log(self);\n        console.log('sign in res', res);\n      }).catch(( err ) => ( console.log( 'sigin err', err.message )));\n\n      /*\n      Axios.post('http://localhost:8080/auth/signin', JSON.stringify( obj ), this.axiosConfig)\n        .then( function( res ) {\n\n          console.log( ' res ', res )\n\n          if ( res.data === '' ) {\n            alert('존재하지 않거나 입력하신 ID or 비밀번호가 일치하지 않습니다!');\n            return;\n          }\n\n          // 사용자 정보를 vuex에 저장시킨다.\n          let storeObj = {};\n          storeObj.id        = res.data.id;\n          storeObj.userId    = self.userId;\n          storeObj.userName  = res.data.username;\n          storeObj.userEmail = res.data.useremail;\n          storeObj.userBirth = res.data.userbirth;\n          storeObj.role      = res.data.role;\n\n          self.$store.commit('SET_USERINFO', storeObj);\n\n        })\n        .catch(function(error) {\n          console.log('res', error);\n        });\n        */\n\n    },\n    /* 검증 */\n    checkInvalidate() {\n\n      if (\n        this.userId === '' ||\n        this.userPw === ''\n      ) {\n        alert('빠짐없이 정보를 입력해주세요!');\n        return false;\n      }\n\n      // userId 체크\n      if ( this.userId.length < 5 ) {\n        alert('ID는 5자리 이상이어야 합니다!');\n        return false;\n      }\n\n      // password 체크\n      if ( this.userPw.length < 6 ) {\n        alert('입력한 글자가 6글자 이상이어야 합니다!');\n        return false;\n      }\n\n      // 모든 검증을 통과시\n      return true;\n    },\n    /* 키이벤트 */\n    keyEvent( e ) {\n\n      const regExp  = /[^0-9a-z]/g;\n      const regExp2 = /[^a-z]/g;\n      const ele     = e.target;\n\n      // userId 첫 글자 숫자 막기\n      if ( this.userId.trim().length === 1 ) {\n\n        if (regExp2.test(ele.value)) {\n          ele.value = ele.value.replace(regExp2, '');\n          alert('ID는 첫 시작은 영문자만 사용가능합니다. ')\n        }\n      }\n\n      // userId 한글입력 막기\n      if (regExp.test(ele.value)) {\n        ele.value = ele.value.replace(regExp, '');\n        alert('ID는 영문(소문자), 숫자만 사용가능합니다. ')\n      }\n\n      // 중복체크 해제\n      if ( this.isUserIdCheck ) this.isUserIdCheck = !this.isUserIdCheck;\n\n    }\n\n\n  }\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~styles/Nomalize.scss';\n@import '~styles/CommonStyle.scss';\n\n</style>\n"]},"metadata":{},"sourceType":"module"}