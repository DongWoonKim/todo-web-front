{"ast":null,"code":"import Modal from '../../components/common/TodoModal.vue';\nimport Axios from 'axios';\nexport default {\n  name: 'SignUp',\n  components: {\n    'Modal': Modal\n  },\n\n  data() {\n    return {\n      userId: '',\n      isUserIdCheck: '',\n      userPw: '',\n      userPwCheck: '',\n      userName: '',\n      userBirth: '',\n      userEmail: '',\n      mailFlag: false\n    };\n  },\n\n  methods: {\n    /* ID 중복 체크 */\n    checkDuplicateId() {\n      let self = this; // axios get 요청\n\n      Axios.get('http://localhost:8080/member', {\n        params: {\n          userId: this.userId\n        }\n      }).then(function (res) {\n        console.log('res', res);\n\n        if (!res.data) {\n          self.isUserIdCheck = true;\n          alert('사용가능한 ID입니다.');\n        } else {\n          self.isUserIdCheck = false;\n          self.userId = '';\n          alert('중복된 ID가 존재합니다.');\n        }\n      }).catch(function (error) {\n        console.log('res', error);\n      });\n    },\n\n    /* email 중복 체크 */\n    async checkDuplicateEmail() {\n      let self = this; // axios get 요청\n\n      await Axios.get('http://localhost:8080/member/email', {\n        params: {\n          userEmail: this.userEmail\n        }\n      }).then(function (res) {\n        console.log('res res res', res);\n\n        if (res.data) {\n          self.mailFlag = true;\n        }\n      }).catch(function (error) {\n        console.log('res', error);\n      });\n    },\n\n    /* 회원가입 */\n    async signUp() {\n      /*\n        ******* 방어코드 시작 *******\n       */\n      // if ( !this.checkInvalidate() ) return;\n      await this.checkDuplicateEmail();\n      console.log('get 2', this.mailFlag);\n\n      if (this.mailFlag) {\n        alert('이미 가입된 email 입니다.');\n        return;\n      }\n      /*\n      let self = this;\n      // axios post 요청\n      let obj = {};\n      obj.userId = this.userId;\n      obj.userPw = this.userPw;\n      obj.userName = this.userName;\n      obj.userBirth = this.userBirth;\n      obj.userEmail = this.userEmail;\n      obj.role = 'u'; // 클라이언트 페이지에서 가입시 기본적으로 권한은 일반사용자이다.\n       Axios.post('http://localhost:8080/member', JSON.stringify( obj ), this.axiosConfig)\n        .then( function( res ) {\n           console.log('res', res);\n          alert('가입을 축하드립니다! 로그인해주세요.');\n          self.signFormInit();\n          self.modalEvent();\n         })\n        .catch(function(error) {\n          console.log('res', error);\n        });\n        */\n\n    },\n\n    /* 키이벤트 */\n    keyEvent(e) {\n      const regExp = /[^0-9a-z]/g;\n      const regExp2 = /[^a-z]/g;\n      const ele = e.target; // userId 첫 글자 숫자 막기\n\n      if (this.userId.trim().length === 1) {\n        if (regExp2.test(ele.value)) {\n          ele.value = ele.value.replace(regExp2, '');\n          alert('ID는 첫 시작은 영문자만 사용가능합니다. ');\n        }\n      } // userId 한글입력 막기\n\n\n      if (regExp.test(ele.value)) {\n        ele.value = ele.value.replace(regExp, '');\n        alert('ID는 영문(소문자), 숫자만 사용가능합니다. ');\n      } // 중복체크 해제\n\n\n      if (this.isUserIdCheck) this.isUserIdCheck = !this.isUserIdCheck;\n    },\n\n    /* 폼 초기화 */\n    signFormInit() {\n      this.userId = '';\n      this.userPw = '';\n      this.userPwCheck = '';\n      this.userName = '';\n      this.userBirth = '';\n      this.userEmail = '';\n      this.mailFlag = false;\n    },\n\n    /* 검증 */\n    checkInvalidate() {\n      // ID 체크\n      if (!this.isUserIdCheck) {\n        alert('ID 중복 체크를 해주세요!');\n        return false;\n      }\n\n      if (this.userId === '' || this.userPw === '' || this.userPwCheck === '' || this.userName === '' || this.userBirth === '' || this.userEmail === '') {\n        alert('빠짐없이 정보를 입력해주세요!');\n        return false;\n      } // userId 체크\n\n\n      if (this.userId.length < 5) {\n        alert('ID는 5자리 이상이어야 합니다!');\n        return false;\n      } // password 체크\n\n\n      if (this.userPw.length < 6) {\n        alert('입력한 글자가 6글자 이상이어야 합니다!');\n        return false;\n      }\n\n      if (this.userPw !== this.userPwCheck) {\n        alert('비밀번호가 일치하지 않습니다!');\n        return false;\n      } // email 체크\n      // 검증에 사용할 정규식 변수\n\n\n      let regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n\n      if (this.userEmail.match(regExp) == null) {\n        alert('이메일 형식이 틀립니다!');\n        return false;\n      } // 모든 검증을 통과시\n\n\n      return true;\n    },\n\n    modalEvent() {\n      this.$emit('modalEvent', 'modalClose');\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["Modal","Axios","name","components","data","userId","isUserIdCheck","userPw","userPwCheck","userName","userBirth","userEmail","mailFlag","methods","checkDuplicateId","self","get","params","then","res","console","log","alert","catch","error","checkDuplicateEmail","signUp","keyEvent","e","regExp","regExp2","ele","target","trim","length","test","value","replace","signFormInit","checkInvalidate","match","modalEvent","$emit"],"sourceRoot":"","sources":["/Users/kdw/Documents/todo/todo-front/src/components/login/SignUp.vue"],"sourcesContent":["<template>\n  <Modal>\n    <template #header>\n      <div class=\"modalClose\" >\n        <i\n        class=\"closeModalBtn fas fa-times\"\n        aria-hidden=\"true\"\n        @click=\"modalEvent\"\n        style=\"font-size:3rem;\"\n        ></i>\n      </div>\n      <h3>회원가입</h3>\n    </template>\n    <template #body>\n\n      <div class=\"input-group\">\n        <span class=\"input-group-addon\">ID</span>\n        <input type=\"text\" v-model=\"userId\" @input=\"keyEvent\" class=\"form-control\" placeholder=\"사용할 ID\">\n        <span class=\"input-group-btn\">\n          <button @click=\"checkDuplicateId\" class=\"btn btn-default\" type=\"button\" style=\"margin:0;\">중복체크</button>\n        </span>\n      </div><!-- /input-group -->\n\n      <div class=\"input-group commonMarginTop\">\n        <span class=\"input-group-addon\">PW</span>\n        <input type=\"password\" v-model=\"userPw\" class=\"form-control\" placeholder=\"비밀번호 입력(6자 이상)\">\n      </div><!-- /input-group -->\n\n      <div class=\"input-group commonMarginTop\">\n        <span class=\"input-group-addon\">PW</span>\n        <input type=\"password\" v-model=\"userPwCheck\" class=\"form-control\" placeholder=\"비밀번호 확인(6자 이상)\">\n      </div><!-- /input-group -->\n\n      <div class=\"input-group commonMarginTop\">\n        <span class=\"input-group-addon\">이름</span>\n        <input type=\"text\" v-model=\"userName\" class=\"form-control\" placeholder=\"이름을 입력하세요.\">\n      </div><!-- /input-group -->\n\n      <div class=\"input-group commonMarginTop\">\n        <span class=\"input-group-addon\">생년월일</span>\n        <input type=\"text\" v-model=\"userBirth\" class=\"form-control\" placeholder=\"ex) 19001010\">\n      </div><!-- /input-group -->\n\n      <div class=\"input-group commonMarginTop\">\n        <span class=\"input-group-addon\">e-mail</span>\n        <input type=\"text\" v-model=\"userEmail\" class=\"form-control\" placeholder=\"ex) XXXXX@XXXX.com\">\n      </div><!-- /input-group -->\n\n    </template>\n    <template #footer>\n      <div class=\"\">\n        <button type=\"button\" @click=\"signUp\" class=\"btn btn-default\" style=\"margin:0;\">가입</button>\n        <button type=\"button\" @click=\"signFormInit\" class=\"btn btn-default commonMarginLeft\" style=\"margin:0; margin-left: 5px;\">초기화</button>\n      </div>\n    </template>\n  </Modal>\n</template>\n\n<script>\nimport Modal from '../../components/common/TodoModal.vue'\nimport Axios from 'axios'\n\nexport default {\n\n  name: 'SignUp',\n  components: {\n    'Modal' : Modal\n  },\n  data() {\n    return {\n      userId : '',\n      isUserIdCheck : '',\n      userPw : '',\n      userPwCheck : '',\n      userName : '',\n      userBirth : '',\n      userEmail : '',\n      mailFlag : false\n    }\n  },\n  methods: {\n    /* ID 중복 체크 */\n    checkDuplicateId() {\n\n      let self = this;\n\n      // axios get 요청\n      Axios.get( 'http://localhost:8080/member', {\n        params : {\n          userId : this.userId\n        }\n      })\n        .then( function( res ) {\n          console.log( 'res', res );\n          if ( !res.data ) {\n            self.isUserIdCheck = true;\n            alert('사용가능한 ID입니다.');\n          } else {\n            self.isUserIdCheck = false;\n            self.userId = '';\n            alert('중복된 ID가 존재합니다.')\n          }\n        })\n        .catch(function(error) {\n          console.log('res', error);\n        });\n\n    },\n    /* email 중복 체크 */\n    async checkDuplicateEmail() {\n\n      let self = this;\n      // axios get 요청\n      await Axios.get( 'http://localhost:8080/member/email', {\n        params : {\n          userEmail : this.userEmail\n        }\n      })\n        .then( function( res ) {\n          console.log('res res res', res);\n          if ( res.data ) {\n            self.mailFlag = true;\n          }\n\n        })\n        .catch(function(error) {\n          console.log('res', error);\n        });\n\n    },\n    /* 회원가입 */\n    async signUp() {\n\n      /*\n        ******* 방어코드 시작 *******\n       */\n      // if ( !this.checkInvalidate() ) return;\n      await this.checkDuplicateEmail()\n      console.log('get 2', this.mailFlag)\n\n      if ( this.mailFlag ) {\n        alert('이미 가입된 email 입니다.');\n        return;\n      }\n      /*\n      let self = this;\n      // axios post 요청\n      let obj = {};\n      obj.userId = this.userId;\n      obj.userPw = this.userPw;\n      obj.userName = this.userName;\n      obj.userBirth = this.userBirth;\n      obj.userEmail = this.userEmail;\n      obj.role = 'u'; // 클라이언트 페이지에서 가입시 기본적으로 권한은 일반사용자이다.\n\n      Axios.post('http://localhost:8080/member', JSON.stringify( obj ), this.axiosConfig)\n        .then( function( res ) {\n\n          console.log('res', res);\n          alert('가입을 축하드립니다! 로그인해주세요.');\n          self.signFormInit();\n          self.modalEvent();\n\n        })\n        .catch(function(error) {\n          console.log('res', error);\n        });\n        */\n\n    },\n    /* 키이벤트 */\n    keyEvent( e ) {\n\n      const regExp  = /[^0-9a-z]/g;\n      const regExp2 = /[^a-z]/g;\n      const ele     = e.target;\n\n      // userId 첫 글자 숫자 막기\n      if ( this.userId.trim().length === 1 ) {\n\n        if (regExp2.test(ele.value)) {\n          ele.value = ele.value.replace(regExp2, '');\n          alert('ID는 첫 시작은 영문자만 사용가능합니다. ')\n        }\n      }\n\n      // userId 한글입력 막기\n      if (regExp.test(ele.value)) {\n        ele.value = ele.value.replace(regExp, '');\n        alert('ID는 영문(소문자), 숫자만 사용가능합니다. ')\n      }\n\n      // 중복체크 해제\n      if ( this.isUserIdCheck ) this.isUserIdCheck = !this.isUserIdCheck;\n\n    },\n    /* 폼 초기화 */\n    signFormInit() {\n\n      this.userId      = '';\n      this.userPw      = '';\n      this.userPwCheck = '';\n      this.userName    = '';\n      this.userBirth   = '';\n      this.userEmail   = '';\n      this.mailFlag    = false;\n\n    },\n    /* 검증 */\n    checkInvalidate() {\n\n      // ID 체크\n      if ( !this.isUserIdCheck ) {\n        alert('ID 중복 체크를 해주세요!');\n        return false;\n      }\n\n      if (\n        this.userId      === '' ||\n        this.userPw      === '' ||\n        this.userPwCheck === '' ||\n        this.userName    === '' ||\n        this.userBirth   === '' ||\n        this.userEmail   === ''\n      ) {\n        alert('빠짐없이 정보를 입력해주세요!');\n        return false;\n      }\n\n      // userId 체크\n      if ( this.userId.length < 5 ) {\n        alert('ID는 5자리 이상이어야 합니다!');\n        return false;\n      }\n\n      // password 체크\n      if ( this.userPw.length < 6 ) {\n        alert('입력한 글자가 6글자 이상이어야 합니다!');\n        return false;\n      }\n      if ( this.userPw !== this.userPwCheck ) {\n        alert('비밀번호가 일치하지 않습니다!');\n        return false;\n      }\n\n      // email 체크\n      // 검증에 사용할 정규식 변수\n      let regExp = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n      if ( this.userEmail.match( regExp ) == null ) {\n        alert('이메일 형식이 틀립니다!');\n        return false;\n      }\n\n      // 모든 검증을 통과시\n      return true;\n    },\n    modalEvent() {\n      this.$emit('modalEvent', 'modalClose');\n    }\n\n  }\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~styles/Nomalize.scss';\n@import '~styles/CommonStyle.scss';\n\n</style>\n"]},"metadata":{},"sourceType":"module"}